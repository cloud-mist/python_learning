'''
------------1.命名空间--------------
定义：名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的
目的：在项目中避免名字冲突的一种方法。各个命名空间是独立的，
      一个命名空间中不能有重名,不同的命名空间是可以重名。
三种：
    1.内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs
    2.全局名称（global names），模块中定义的名称，记录了模块的变量
    3.局部名称（local names），函数中定义的名称 记录了函数的变量，

    4.查找顺序  局部的命名空间 -> 全局命名空间 -> 内置命名空间。

-------------2.作用域--------------
四种：
    1.L（Local）：最内层，包含局部变量，比如一个函数/方法内部。
    2.E（Enclosing）：包含非局部也非全局的变量。比如两个嵌套函数
    3.G（Global）：当前脚本的最外层，比如当前模块的全局变量。
    4.B（Built-in）： 包含了内建的变量/关键字等。，最后被搜索

    5.规则顺序： L –> E –> G –>gt;B

-----------3.全局和局部变量---------
1.函数内部变量是局部作用域，函数外部变量是全局作用域
2.局部变量只能在其被声明的函数内部访问，全局变量可以在整个程序范围内访问。
3.调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。
'''
total = 0                           # 全局变量
def sum(arg1, arg2):
    total = arg1 + arg2             # 局部变量
    print("函数内是局部变量:", total)
    return total

sum(10,20)                          # 30
print("函数外是局部变量:", total)    # 0



'''
 ===========4.global & nonlocal ==========
目的:内部作用域想修改外部作用域的变量，就要用到global和nonlocal关键字
'''
# 1.修改全局变量 num
num = 1
def func1():
    global num  # global 声明
    print(num)
    num = 123
    print(num)
func1()         # 1 123
print(num)      # 123

# 2.修改嵌套作用域中的变量则需要nonlocal
def outer():
    num2 = 10
    def inner():
        nonlocal num2
        num2 = 100
        print(num2)
    inner()
    print(num2)
outer()     # 100 100